//
//  WMStoreViewController.swift
//  Wingman
//
//  Created by Kraisorn Soisakhu on 5/16/22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift HELM Xcode Templates
//  https://github.com/HelmMobile/clean-swift-templates

import UIKit

protocol WMStoreViewControllerInput {
    
}

protocol WMStoreViewControllerOutput {
    func GetStore(request: WMStoreScene.GetStore.Request)
    func GetProductList(request: WMStoreScene.GetProductList.Request)
}

enum WMStoreSection: Int, CaseIterable {
    case storeInfo = 0
    case productList
}

class WMStoreViewController: UIViewController, WMStoreViewControllerInput {
    
    @IBOutlet weak var tableView: UITableView! {
        didSet {
            self.configTableView()
        }
    }
    
    var output: WMStoreViewControllerOutput?
    var router: WMStoreRouter?
    
    // MARK: Object lifecycle
    
    private var group: DispatchGroup?
    private(set) var productDataSource: [Product] = []
    private(set) var storeData: StoreData?
    
    override func awakeFromNib() {
        super.awakeFromNib()
        WMStoreConfigurator.sharedInstance.configure(viewController: self)
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        
        self.group = DispatchGroup()
        self.getStoreData()
        self.getProductList()
        
        self.group?.notify(queue: .main, execute: {
            self.tableView.reloadData()
        })
    }
    
    private func configTableView() {
        self.tableView.register(ProductViewCell.nib, forCellReuseIdentifier: ProductViewCell.identifier)
        self.tableView.register(StoreInfoViewCell.nib, forCellReuseIdentifier: StoreInfoViewCell.identifier)
        
        self.tableView.dataSource = self
        
        self.tableView.estimatedRowHeight = 145
        self.tableView.rowHeight = UITableView.automaticDimension
        self.tableView.tableFooterView = UIView()
    }
    
    // MARK: Requests
    
    func getStoreData() {
        self.group?.enter()
        let request = WMStoreScene.GetStore.Request()
        self.output?.GetStore(request: request)
    }
    
    func getProductList() {
        self.group?.enter()
        let request = WMStoreScene.GetProductList.Request()
        self.output?.GetProductList(request: request)
    }
    
    // MARK: Display logic
    
    func presentGetStore(viewModel: WMStoreScene.GetStore.ViewModel) {
        switch viewModel.status {
        case .success(let model):
            self.storeData = model.data
            self.group?.leave()
        case .failure(let title, let message):
            print(title ?? "", message ?? "")
            self.group?.leave()
        }
    }
    
    func presentGetProductList(viewModel: WMStoreScene.GetProductList.ViewModel) {
        switch viewModel.status {
        case .success(let model):
            self.productDataSource = model.data ?? []
            self.group?.leave()
        case .failure(let title, let message):
            print(title ?? "" , message ?? "")
            self.group?.leave()
        }
    }
}

extension WMStoreViewController: UITableViewDataSource {
    func numberOfSections(in tableView: UITableView) -> Int {
        return WMStoreSection.allCases.count
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        switch WMStoreSection(rawValue: section) {
        case .storeInfo:
            return self.storeData != nil ? 1 : 0
        case .productList:
            return self.productDataSource.count
        default:
            return 0
        }
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        
        switch WMStoreSection(rawValue: indexPath.section) {
        case .storeInfo:
            guard let cell = tableView.dequeueReusableCell(withIdentifier: StoreInfoViewCell.identifier, for: indexPath) as? StoreInfoViewCell else {
                return UITableViewCell()
            }
            
            cell.setStoreInfo(self.storeData)
            return cell
            
        case .productList:
            guard let cell = tableView.dequeueReusableCell(withIdentifier: ProductViewCell.identifier, for: indexPath) as? ProductViewCell else {
                return UITableViewCell()
            }
            
            cell.setProductInfo(self.productDataSource[indexPath.row])
            return cell
            
        default:
            return UITableViewCell()
        }
    }
}

//This should be on configurator but for some reason storyboard doesn't detect ViewController's name if placed there
extension WMStoreViewController: WMStorePresenterOutput {
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        router?.passDataToNextScene(for: segue)
    }
}
